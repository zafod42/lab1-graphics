Калабин Павел Павлович 5130904/20103
Вариант 1
Постановка задачи
=================
Целью работы является ознакомление с основами векторной графики и получение 
навыков работы с базовыми функциями графического API и трехмерными графическими примитивами.
Требуется при помощи стандартных функций бибилиотеки (OpenGL/Vulkan или DirectX) 
    изобразить указанные объекты и произвести необходимые преобразования.

Изобразить каркасный конус и каркасную сферу, расположенные на некотором расстоянии друг от друга.
Совместить центр основания конуса и центр сферы.
Изобразить тор и цилиндр. Размеры и местоположение примитивов задать самостоятельно.
Выполнить последовательно сначала поворот цилиндра вокруг оси Х, а затем растяжение тора в 2 раза.

Ход работы
==========
В качестве среды выполнения работы была выбрана библиотека OpenGL.
Для выполнения работы были использованы примитивы из библиотеки OpenGL
Utility (GLU) и OpenGL Utility Toolkit (GLUT).

Настройка OpenGL
++++++++++++++++
Для корректной работы и отрисовки примитивов OpenGL необходимо настроить.
Для этого была создана матрица проекции (projection matrix) и видовая матрица
(view matrix). Матрицы были созданы при помощи операций над стеком матриц.
Кратко, работу со стеком матриц можно описать следующим образом: сначала
загружается некоторая матрица, например единичная матрица, далее применяется
функция из библиотеки OpenGL или GLU, которая умножает некоторую другую
матрицу на ту, что находится в стеке слева. Как итог на стеке остаётся
преобразованная матрица с необходимыми нам характеристиками. Далее работа со
стеком матриц будет подробнее рассмотрена на примере построения сцены.

Матрица проекции отвечает за проекцию трёхмерного пространства на двумерное
пространство экрана. Помимо этого матрица проекции отвечает за отсечение тех
объектов, которые не будут видны в обозначенной области поля зрения.
Существует несколько видов матриц проекции, например ортографическая проекция,
такая проекция переносит объекты "как есть" без учета перспективы.
Второй вид проекции это проекция с перспективой, она позволяет отобразить
объекты с учетом их положения в пространстве так, как они бы выглядели при
взгляде на них вживую.

В работе была использована матрица проекции с перспективой из библиотеки GLU.
Матрица обычная матрица с перспективой (frustum) выглядит с следующим образом:

[математическое выражение для матрицы] 
(https://registry.khronos.org/OpenGL-Refpages/gl2.1/xhtml/glFrustum.xml)

Библиотека GLU использует матрицу с параметром поля зрения (FOV)

[математическое выражение для матрицы] 
(https://registry.khronos.org/OpenGL-Refpages/gl2.1/xhtml/gluPerspective.xml)

Видовая матрица отвечает за преобразование мировых координат в пространство
координат камеры, эта матрица как бы перемещает точку наблюдения в центр
камеры.

В качестве такой матрицы была использована матрица LookAt, которую
предоставляет функция gluLookAt

[математическое выражение для матрицы]
(https://registry.khronos.org/OpenGL-Refpages/gl2.1/xhtml/gluLookAt.xml)

Сцены
+++++++
Для начала была составлена сцена из синей сферы и фиолетового конуса,
для этого были использованы функции glutWireCone и glutWireSphere.
Эти функции используют внутреннюю реализацию из библиотеки GLU, в частности
реализация конуса представляет собой вызов функции отрисовки циллиндра с
нулевым параметром радиуса верхней части, так что верхний радиус циллиндра
вырождается в точку.

Для создания сцены необходимо использовать стек матриц, для представления
каждого примитива в виде набора вершин и манипуляции этими объектами.
При создании сцены на стек матриц заносится матрица, отвечающая за
трансформации сцены в целом (например, вращение целой сцены). Далее по
очередно заносятся матрицы, отвечающие за трансформации над объектами и
описываются соотвествующие им примитивы.

Анимации
++++++++

Для анимирования сцен, сами сцены были параметризованы, например смещение
сферы на некоторую позицию. Параметры сцен меняются в функциях animate,
которые задают анимации для каждой сцены.

Скриншоты
+++++++++

Сцена 1 и анимация
[scene1 1..4]

Сцена 2 и анимация
[scene2 1..4]

Приложение с кодом программы
package listings main.cc

